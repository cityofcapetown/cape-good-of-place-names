# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from cape_of_good_place_names.models.base_model_ import Model
from cape_of_good_place_names.models.scrub_result import ScrubResult  # noqa: F401,E501
from cape_of_good_place_names import util


class ScrubResults(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: str=None, timestamp: datetime=None, results: List[ScrubResult]=None):  # noqa: E501
        """ScrubResults - a model defined in Swagger

        :param id: The id of this ScrubResults.  # noqa: E501
        :type id: str
        :param timestamp: The timestamp of this ScrubResults.  # noqa: E501
        :type timestamp: datetime
        :param results: The results of this ScrubResults.  # noqa: E501
        :type results: List[ScrubResult]
        """
        self.swagger_types = {
            'id': str,
            'timestamp': datetime,
            'results': List[ScrubResult]
        }

        self.attribute_map = {
            'id': 'id',
            'timestamp': 'timestamp',
            'results': 'results'
        }
        self._id = id
        self._timestamp = timestamp
        self._results = results

    @classmethod
    def from_dict(cls, dikt) -> 'ScrubResults':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ScrubResults of this ScrubResults.  # noqa: E501
        :rtype: ScrubResults
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this ScrubResults.

        UUID describing the transaction  # noqa: E501

        :return: The id of this ScrubResults.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this ScrubResults.

        UUID describing the transaction  # noqa: E501

        :param id: The id of this ScrubResults.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def timestamp(self) -> datetime:
        """Gets the timestamp of this ScrubResults.

        Server time of the transaction  # noqa: E501

        :return: The timestamp of this ScrubResults.
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp: datetime):
        """Sets the timestamp of this ScrubResults.

        Server time of the transaction  # noqa: E501

        :param timestamp: The timestamp of this ScrubResults.
        :type timestamp: datetime
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp

    @property
    def results(self) -> List[ScrubResult]:
        """Gets the results of this ScrubResults.

        Array of Scrub results  # noqa: E501

        :return: The results of this ScrubResults.
        :rtype: List[ScrubResult]
        """
        return self._results

    @results.setter
    def results(self, results: List[ScrubResult]):
        """Sets the results of this ScrubResults.

        Array of Scrub results  # noqa: E501

        :param results: The results of this ScrubResults.
        :type results: List[ScrubResult]
        """
        if results is None:
            raise ValueError("Invalid value for `results`, must not be `None`")  # noqa: E501

        self._results = results

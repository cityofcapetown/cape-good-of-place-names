# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from cape_of_good_place_names.models.base_model_ import Model
from cape_of_good_place_names import util


class GeocodeResult(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, geocoder_id: str=None, geocoded_value: object=None, confidence: float=None):  # noqa: E501
        """GeocodeResult - a model defined in Swagger

        :param geocoder_id: The geocoder_id of this GeocodeResult.  # noqa: E501
        :type geocoder_id: str
        :param geocoded_value: The geocoded_value of this GeocodeResult.  # noqa: E501
        :type geocoded_value: object
        :param confidence: The confidence of this GeocodeResult.  # noqa: E501
        :type confidence: float
        """
        self.swagger_types = {
            'geocoder_id': str,
            'geocoded_value': object,
            'confidence': float
        }

        self.attribute_map = {
            'geocoder_id': 'geocoder_id',
            'geocoded_value': 'geocoded_value',
            'confidence': 'confidence'
        }
        self._geocoder_id = geocoder_id
        self._geocoded_value = geocoded_value
        self._confidence = confidence

    @classmethod
    def from_dict(cls, dikt) -> 'GeocodeResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The GeocodeResult of this GeocodeResult.  # noqa: E501
        :rtype: GeocodeResult
        """
        return util.deserialize_model(dikt, cls)

    @property
    def geocoder_id(self) -> str:
        """Gets the geocoder_id of this GeocodeResult.

        Identifier for the geocoder  # noqa: E501

        :return: The geocoder_id of this GeocodeResult.
        :rtype: str
        """
        return self._geocoder_id

    @geocoder_id.setter
    def geocoder_id(self, geocoder_id: str):
        """Sets the geocoder_id of this GeocodeResult.

        Identifier for the geocoder  # noqa: E501

        :param geocoder_id: The geocoder_id of this GeocodeResult.
        :type geocoder_id: str
        """
        if geocoder_id is None:
            raise ValueError("Invalid value for `geocoder_id`, must not be `None`")  # noqa: E501

        self._geocoder_id = geocoder_id

    @property
    def geocoded_value(self) -> object:
        """Gets the geocoded_value of this GeocodeResult.

        Resulting GeoJSON string from the GeoCoder  # noqa: E501

        :return: The geocoded_value of this GeocodeResult.
        :rtype: object
        """
        return self._geocoded_value

    @geocoded_value.setter
    def geocoded_value(self, geocoded_value: object):
        """Sets the geocoded_value of this GeocodeResult.

        Resulting GeoJSON string from the GeoCoder  # noqa: E501

        :param geocoded_value: The geocoded_value of this GeocodeResult.
        :type geocoded_value: object
        """
        if geocoded_value is None:
            raise ValueError("Invalid value for `geocoded_value`, must not be `None`")  # noqa: E501

        self._geocoded_value = geocoded_value

    @property
    def confidence(self) -> float:
        """Gets the confidence of this GeocodeResult.


        :return: The confidence of this GeocodeResult.
        :rtype: float
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence: float):
        """Sets the confidence of this GeocodeResult.


        :param confidence: The confidence of this GeocodeResult.
        :type confidence: float
        """
        if confidence is None:
            raise ValueError("Invalid value for `confidence`, must not be `None`")  # noqa: E501

        self._confidence = confidence

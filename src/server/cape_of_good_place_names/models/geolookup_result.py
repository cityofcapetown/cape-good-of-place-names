# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from cape_of_good_place_names.models.base_model_ import Model
from cape_of_good_place_names import util


class GeolookupResult(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, geolookup_id: str=None, geolookup_value: object=None):  # noqa: E501
        """GeolookupResult - a model defined in Swagger

        :param geolookup_id: The geolookup_id of this GeolookupResult.  # noqa: E501
        :type geolookup_id: str
        :param geolookup_value: The geolookup_value of this GeolookupResult.  # noqa: E501
        :type geolookup_value: object
        """
        self.swagger_types = {
            'geolookup_id': str,
            'geolookup_value': object
        }

        self.attribute_map = {
            'geolookup_id': 'geolookup_id',
            'geolookup_value': 'geolookup_value'
        }
        self._geolookup_id = geolookup_id
        self._geolookup_value = geolookup_value

    @classmethod
    def from_dict(cls, dikt) -> 'GeolookupResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The GeolookupResult of this GeolookupResult.  # noqa: E501
        :rtype: GeolookupResult
        """
        return util.deserialize_model(dikt, cls)

    @property
    def geolookup_id(self) -> str:
        """Gets the geolookup_id of this GeolookupResult.

        Identifier for the geospatial entity  # noqa: E501

        :return: The geolookup_id of this GeolookupResult.
        :rtype: str
        """
        return self._geolookup_id

    @geolookup_id.setter
    def geolookup_id(self, geolookup_id: str):
        """Sets the geolookup_id of this GeolookupResult.

        Identifier for the geospatial entity  # noqa: E501

        :param geolookup_id: The geolookup_id of this GeolookupResult.
        :type geolookup_id: str
        """
        if geolookup_id is None:
            raise ValueError("Invalid value for `geolookup_id`, must not be `None`")  # noqa: E501

        self._geolookup_id = geolookup_id

    @property
    def geolookup_value(self) -> object:
        """Gets the geolookup_value of this GeolookupResult.

        Resulting GeoJSON string from the lookup  # noqa: E501

        :return: The geolookup_value of this GeolookupResult.
        :rtype: object
        """
        return self._geolookup_value

    @geolookup_value.setter
    def geolookup_value(self, geolookup_value: object):
        """Sets the geolookup_value of this GeolookupResult.

        Resulting GeoJSON string from the lookup  # noqa: E501

        :param geolookup_value: The geolookup_value of this GeolookupResult.
        :type geolookup_value: object
        """
        if geolookup_value is None:
            raise ValueError("Invalid value for `geolookup_value`, must not be `None`")  # noqa: E501

        self._geolookup_value = geolookup_value

# coding: utf-8

"""
    Cape of Good Place Names Service

    This is a stateless service for performing various geotranslation operations, moving between how people describe places and codified coordinate systems.  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Contact: opmdata+cogpn-support@capetown.gov.za
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from cape_of_good_place_names_client.configuration import Configuration


class GeocodeResult(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'geocoder_id': 'str',
        'geocoded_value': 'object',
        'confidence': 'float'
    }

    attribute_map = {
        'geocoder_id': 'geocoder_id',
        'geocoded_value': 'geocoded_value',
        'confidence': 'confidence'
    }

    def __init__(self, geocoder_id=None, geocoded_value=None, confidence=None, local_vars_configuration=None):  # noqa: E501
        """GeocodeResult - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._geocoder_id = None
        self._geocoded_value = None
        self._confidence = None
        self.discriminator = None

        self.geocoder_id = geocoder_id
        self.geocoded_value = geocoded_value
        self.confidence = confidence

    @property
    def geocoder_id(self):
        """Gets the geocoder_id of this GeocodeResult.  # noqa: E501

        Identifier for the geocoder  # noqa: E501

        :return: The geocoder_id of this GeocodeResult.  # noqa: E501
        :rtype: str
        """
        return self._geocoder_id

    @geocoder_id.setter
    def geocoder_id(self, geocoder_id):
        """Sets the geocoder_id of this GeocodeResult.

        Identifier for the geocoder  # noqa: E501

        :param geocoder_id: The geocoder_id of this GeocodeResult.  # noqa: E501
        :type geocoder_id: str
        """
        if self.local_vars_configuration.client_side_validation and geocoder_id is None:  # noqa: E501
            raise ValueError("Invalid value for `geocoder_id`, must not be `None`")  # noqa: E501

        self._geocoder_id = geocoder_id

    @property
    def geocoded_value(self):
        """Gets the geocoded_value of this GeocodeResult.  # noqa: E501

        Resulting GeoJSON string from the GeoCoder  # noqa: E501

        :return: The geocoded_value of this GeocodeResult.  # noqa: E501
        :rtype: object
        """
        return self._geocoded_value

    @geocoded_value.setter
    def geocoded_value(self, geocoded_value):
        """Sets the geocoded_value of this GeocodeResult.

        Resulting GeoJSON string from the GeoCoder  # noqa: E501

        :param geocoded_value: The geocoded_value of this GeocodeResult.  # noqa: E501
        :type geocoded_value: object
        """
        if self.local_vars_configuration.client_side_validation and geocoded_value is None:  # noqa: E501
            raise ValueError("Invalid value for `geocoded_value`, must not be `None`")  # noqa: E501

        self._geocoded_value = geocoded_value

    @property
    def confidence(self):
        """Gets the confidence of this GeocodeResult.  # noqa: E501


        :return: The confidence of this GeocodeResult.  # noqa: E501
        :rtype: float
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence):
        """Sets the confidence of this GeocodeResult.


        :param confidence: The confidence of this GeocodeResult.  # noqa: E501
        :type confidence: float
        """
        if self.local_vars_configuration.client_side_validation and confidence is None:  # noqa: E501
            raise ValueError("Invalid value for `confidence`, must not be `None`")  # noqa: E501

        self._confidence = confidence

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GeocodeResult):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GeocodeResult):
            return True

        return self.to_dict() != other.to_dict()
